// Generated by gencpp from file ms_pkg/Greeting_serviceRequest.msg
// DO NOT EDIT!


#ifndef MS_PKG_MESSAGE_GREETING_SERVICEREQUEST_H
#define MS_PKG_MESSAGE_GREETING_SERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ms_pkg
{
template <class ContainerAllocator>
struct Greeting_serviceRequest_
{
  typedef Greeting_serviceRequest_<ContainerAllocator> Type;

  Greeting_serviceRequest_()
    : action()
    , image_path()
    , user_prompt()  {
    }
  Greeting_serviceRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , image_path(_alloc)
    , user_prompt(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _image_path_type;
  _image_path_type image_path;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _user_prompt_type;
  _user_prompt_type user_prompt;





  typedef boost::shared_ptr< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Greeting_serviceRequest_

typedef ::ms_pkg::Greeting_serviceRequest_<std::allocator<void> > Greeting_serviceRequest;

typedef boost::shared_ptr< ::ms_pkg::Greeting_serviceRequest > Greeting_serviceRequestPtr;
typedef boost::shared_ptr< ::ms_pkg::Greeting_serviceRequest const> Greeting_serviceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator1> & lhs, const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.image_path == rhs.image_path &&
    lhs.user_prompt == rhs.user_prompt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator1> & lhs, const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ms_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "75a78b45ce12ca215b0b79c78a48ca4d";
  }

  static const char* value(const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x75a78b45ce12ca21ULL;
  static const uint64_t static_value2 = 0x5b0b79c78a48ca4dULL;
};

template<class ContainerAllocator>
struct DataType< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ms_pkg/Greeting_serviceRequest";
  }

  static const char* value(const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string image_path\n"
"string user_prompt\n"
;
  }

  static const char* value(const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.image_path);
      stream.next(m.user_prompt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Greeting_serviceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ms_pkg::Greeting_serviceRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "image_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.image_path);
    s << indent << "user_prompt: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.user_prompt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MS_PKG_MESSAGE_GREETING_SERVICEREQUEST_H
